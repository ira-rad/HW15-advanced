{"version":3,"sources":["components/img/comment.svg","components/img/like.svg","components/img/repost.svg","components/img/share.svg","components/img/arrow.svg","components/footer.js","components/post.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Footer","key","className","alt","src","image","number","postFooter","coment","repost","like","share","map","el","index","Post","props","author","photo","name","nickname","date","arrow","content","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,qC,gBCA3CD,EAAOC,QAAU,IAA0B,kC,gBCA3CD,EAAOC,QAAU,IAA0B,oC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,gBCA3CD,EAAOC,QAAU,IAA0B,mC,mKCS5BC,G,MAPA,SAACC,GAAD,OACb,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,oBAAoBC,IAAI,cAAcC,IAAKH,EAAII,QAC9D,2BAAIJ,EAAIK,W,8FCsBNC,EAjBO,CACX,CACEF,MAAOG,IACPF,OAAQ,KAEV,CACED,MAAOI,IACPH,OAAQ,KAEV,CACED,MAAOK,IACPJ,OAAQ,KAEV,CACED,MAAOM,MAGeC,KAAI,SAACC,EAAIC,GAAL,OAC5B,kBAAC,EAAD,CAAQb,IAAKa,EAAOT,MAAOQ,EAAGR,MAAOC,OAAQO,EAAGP,YAyBnCS,EAtBF,SAACC,GAAD,OACX,yBAAKd,UAAU,WACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,aAAaC,IAAI,SAASC,IAAKY,EAAMC,OAAOC,SAE7D,yBAAKhB,UAAU,cACb,yBAAKA,UAAU,aACb,uBAAGA,UAAU,aACX,0BAAMA,UAAU,YAAYc,EAAMC,OAAOE,MACxCH,EAAMC,OAAOG,SAFhB,SAE6BJ,EAAMK,MAEnC,yBAAKnB,UAAU,QAAQE,IAAKkB,IAAOnB,IAAI,MAEzC,uBAAGD,UAAU,eAAec,EAAMO,SAClC,yBAAKrB,UAAU,YACb,yBAAKA,UAAU,YAAYC,IAAI,OAAOC,IAAKY,EAAMX,SAEnD,yBAAKH,UAAU,gBAAf,IAAgCK,MCvBvBiB,MAjBf,WACE,OACE,yBAAKtB,UAAU,OACb,kBAAC,EAAD,CACEe,OAAQ,CACNE,KAAM,mBACND,MAVR,6FAWQE,SAAU,eAEZG,QAAQ,kDACRlB,MAZN,gGAaMgB,KAAM,mCCPMI,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.c4e7fd3c.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/comment.cdd2dd48.svg\";","module.exports = __webpack_public_path__ + \"static/media/like.31d76102.svg\";","module.exports = __webpack_public_path__ + \"static/media/repost.51bdb263.svg\";","module.exports = __webpack_public_path__ + \"static/media/share.29b987f7.svg\";","module.exports = __webpack_public_path__ + \"static/media/arrow.412f3289.svg\";","import React from \"react\";\r\n\r\nconst Footer = (key) => (\r\n  <div className=\"footer__data\">\r\n    <img className=\"footer__icon icon\" alt=\"footer-icon\" src={key.image} />\r\n    <p>{key.number}</p>\r\n  </div>\r\n);\r\n\r\nexport default Footer;\r\n","import React from \"react\";\r\nimport Footer from \"./footer\";\r\nimport \"../reset.css\";\r\nimport \"./style.css\";\r\nimport coment from \"./img/comment.svg\";\r\nimport like from \"./img/like.svg\";\r\nimport repost from \"./img/repost.svg\";\r\nimport share from \"./img/share.svg\";\r\nimport arrow from \"./img/arrow.svg\";\r\n\r\nlet footer = [\r\n  {\r\n    image: coment,\r\n    number: 482,\r\n  },\r\n  {\r\n    image: repost,\r\n    number: 146,\r\n  },\r\n  {\r\n    image: like,\r\n    number: 887,\r\n  },\r\n  {\r\n    image: share,\r\n  },\r\n];\r\nconst postFooter = footer.map((el, index) => (\r\n  <Footer key={index} image={el.image} number={el.number} />\r\n));\r\n\r\nconst Post = (props) => (\r\n  <div className=\"wrapper\">\r\n    <div className=\"photo__container\">\r\n      <img className=\"main-photo\" alt=\"avatar\" src={props.author.photo} />\r\n    </div>\r\n    <div className=\"about-user\">\r\n      <div className=\"user-info\">\r\n        <p className=\"user-date\">\r\n          <span className=\"name txt\">{props.author.name}</span>\r\n          {props.author.nickname} · {props.date}\r\n        </p>\r\n        <img className=\"arrow\" src={arrow} alt=\"\" />\r\n      </div>\r\n      <p className=\"content txt\">{props.content}</p>\r\n      <div className=\"post-img\">\r\n        <img className=\"user-post\" alt=\"post\" src={props.image} />\r\n      </div>\r\n      <div className=\"post__footer\"> {postFooter}</div>\r\n    </div>\r\n  </div>\r\n);\r\n\r\nexport default Post;\r\n","import React from \"react\";\nimport Post from \"./components/post.js\";\n\nconst ANAKIN_IMAGE =\n  \"https://upload.wikimedia.org/wikipedia/en/thumb/7/74/Anakin-Jedi.jpg/220px-Anakin-Jedi.jpg\";\nconst RAY_IMAGE =\n  \"https://specials-images.forbesimg.com/imageserve/5e63b3c8e1e617000759130e/960x0.jpg?fit=scale\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Post\n        author={{\n          name: \"Anakin skywalker\",\n          photo: ANAKIN_IMAGE,\n          nickname: \"@dart_vader\",\n        }}\n        content=\"WTF? Who is Ray? Why she is Skywalker? Luke...?\"\n        image={RAY_IMAGE}\n        date={\"26 февр.\"}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}